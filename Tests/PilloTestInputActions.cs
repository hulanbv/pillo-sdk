//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Packages/nl.hulan.pillo-sdk/Tests/PilloTestInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PilloTestInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PilloTestInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PilloTestInputActions"",
    ""maps"": [
        {
            ""name"": ""Pillo Action Map"",
            ""id"": ""4c66e5a4-8233-4cb4-8d74-f480445798c0"",
            ""actions"": [
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""76d02c43-355e-4e05-bcbc-905cb6d83aa3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""56491ae8-5d37-4525-9abe-b7d64fbc9608"",
                    ""path"": ""<PilloInputDevice>/Button"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pillo Control Scheme"",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96e9089c-848e-4d88-86d7-2117e641cb9c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pillo Control Scheme"",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Pillo Control Scheme"",
            ""bindingGroup"": ""Pillo Control Scheme"",
            ""devices"": []
        }
    ]
}");
        // Pillo Action Map
        m_PilloActionMap = asset.FindActionMap("Pillo Action Map", throwIfNotFound: true);
        m_PilloActionMap_Test = m_PilloActionMap.FindAction("Test", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pillo Action Map
    private readonly InputActionMap m_PilloActionMap;
    private IPilloActionMapActions m_PilloActionMapActionsCallbackInterface;
    private readonly InputAction m_PilloActionMap_Test;
    public struct PilloActionMapActions
    {
        private @PilloTestInputActions m_Wrapper;
        public PilloActionMapActions(@PilloTestInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test => m_Wrapper.m_PilloActionMap_Test;
        public InputActionMap Get() { return m_Wrapper.m_PilloActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PilloActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPilloActionMapActions instance)
        {
            if (m_Wrapper.m_PilloActionMapActionsCallbackInterface != null)
            {
                @Test.started -= m_Wrapper.m_PilloActionMapActionsCallbackInterface.OnTest;
                @Test.performed -= m_Wrapper.m_PilloActionMapActionsCallbackInterface.OnTest;
                @Test.canceled -= m_Wrapper.m_PilloActionMapActionsCallbackInterface.OnTest;
            }
            m_Wrapper.m_PilloActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Test.started += instance.OnTest;
                @Test.performed += instance.OnTest;
                @Test.canceled += instance.OnTest;
            }
        }
    }
    public PilloActionMapActions @PilloActionMap => new PilloActionMapActions(this);
    private int m_PilloControlSchemeSchemeIndex = -1;
    public InputControlScheme PilloControlSchemeScheme
    {
        get
        {
            if (m_PilloControlSchemeSchemeIndex == -1) m_PilloControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Pillo Control Scheme");
            return asset.controlSchemes[m_PilloControlSchemeSchemeIndex];
        }
    }
    public interface IPilloActionMapActions
    {
        void OnTest(InputAction.CallbackContext context);
    }
}
